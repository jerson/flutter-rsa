// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library model;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class SaltLength {
  final int value;
  const SaltLength._(this.value);

  factory SaltLength.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum SaltLength');
    }
    return result;
  }

  static SaltLength? _createOrNull(int? value) =>
      value == null ? null : SaltLength.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const SaltLength AUTO = SaltLength._(0);
  static const SaltLength EQUALS_HASH = SaltLength._(1);
  static const Map<int, SaltLength> values = {0: AUTO, 1: EQUALS_HASH};

  static const fb.Reader<SaltLength> reader = _SaltLengthReader();

  @override
  String toString() {
    return 'SaltLength{value: $value}';
  }
}

class _SaltLengthReader extends fb.Reader<SaltLength> {
  const _SaltLengthReader();

  @override
  int get size => 4;

  @override
  SaltLength read(fb.BufferContext bc, int offset) =>
      SaltLength.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Pemcipher {
  final int value;
  const Pemcipher._(this.value);

  factory Pemcipher.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Pemcipher');
    }
    return result;
  }

  static Pemcipher? _createOrNull(int? value) =>
      value == null ? null : Pemcipher.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const Pemcipher DES = Pemcipher._(0);
  static const Pemcipher D3DES = Pemcipher._(1);
  static const Pemcipher AES128 = Pemcipher._(2);
  static const Pemcipher AES192 = Pemcipher._(3);
  static const Pemcipher AES256 = Pemcipher._(4);
  static const Map<int, Pemcipher> values = {
    0: DES,
    1: D3DES,
    2: AES128,
    3: AES192,
    4: AES256
  };

  static const fb.Reader<Pemcipher> reader = _PemcipherReader();

  @override
  String toString() {
    return 'Pemcipher{value: $value}';
  }
}

class _PemcipherReader extends fb.Reader<Pemcipher> {
  const _PemcipherReader();

  @override
  int get size => 4;

  @override
  Pemcipher read(fb.BufferContext bc, int offset) =>
      Pemcipher.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Hash {
  final int value;
  const Hash._(this.value);

  factory Hash.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Hash');
    }
    return result;
  }

  static Hash? _createOrNull(int? value) =>
      value == null ? null : Hash.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  static const Hash MD5 = Hash._(0);
  static const Hash SHA1 = Hash._(1);
  static const Hash SHA224 = Hash._(2);
  static const Hash SHA256 = Hash._(3);
  static const Hash SHA384 = Hash._(4);
  static const Hash SHA512 = Hash._(5);
  static const Map<int, Hash> values = {
    0: MD5,
    1: SHA1,
    2: SHA224,
    3: SHA256,
    4: SHA384,
    5: SHA512
  };

  static const fb.Reader<Hash> reader = _HashReader();

  @override
  String toString() {
    return 'Hash{value: $value}';
  }
}

class _HashReader extends fb.Reader<Hash> {
  const _HashReader();

  @override
  int get size => 4;

  @override
  Hash read(fb.BufferContext bc, int offset) =>
      Hash.fromValue(const fb.Int32Reader().read(bc, offset));
}

class ConvertJwtrequest {
  ConvertJwtrequest._(this._bc, this._bcOffset);
  factory ConvertJwtrequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConvertJwtrequest> reader = _ConvertJwtrequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get data =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get keyId =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ConvertJwtrequest{data: ${data}, keyId: ${keyId}}';
  }
}

class _ConvertJwtrequestReader extends fb.TableReader<ConvertJwtrequest> {
  const _ConvertJwtrequestReader();

  @override
  ConvertJwtrequest createObject(fb.BufferContext bc, int offset) =>
      ConvertJwtrequest._(bc, offset);
}

class ConvertJwtrequestBuilder {
  ConvertJwtrequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addKeyIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConvertJwtrequestObjectBuilder extends fb.ObjectBuilder {
  final String? _data;
  final String? _keyId;

  ConvertJwtrequestObjectBuilder({
    String? data,
    String? keyId,
  })  : _data = data,
        _keyId = keyId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dataOffset =
        _data == null ? null : fbBuilder.writeString(_data!);
    final int? keyIdOffset =
        _keyId == null ? null : fbBuilder.writeString(_keyId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, dataOffset);
    fbBuilder.addOffset(1, keyIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ConvertKeyPairRequest {
  ConvertKeyPairRequest._(this._bc, this._bcOffset);
  factory ConvertKeyPairRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConvertKeyPairRequest> reader =
      _ConvertKeyPairRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get certificate =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get password =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ConvertKeyPairRequest{privateKey: ${privateKey}, certificate: ${certificate}, password: ${password}}';
  }
}

class _ConvertKeyPairRequestReader
    extends fb.TableReader<ConvertKeyPairRequest> {
  const _ConvertKeyPairRequestReader();

  @override
  ConvertKeyPairRequest createObject(fb.BufferContext bc, int offset) =>
      ConvertKeyPairRequest._(bc, offset);
}

class ConvertKeyPairRequestBuilder {
  ConvertKeyPairRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addCertificateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPasswordOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConvertKeyPairRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;
  final String? _certificate;
  final String? _password;

  ConvertKeyPairRequestObjectBuilder({
    String? privateKey,
    String? certificate,
    String? password,
  })  : _privateKey = privateKey,
        _certificate = certificate,
        _password = password;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? certificateOffset =
        _certificate == null ? null : fbBuilder.writeString(_certificate!);
    final int? passwordOffset =
        _password == null ? null : fbBuilder.writeString(_password!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, privateKeyOffset);
    fbBuilder.addOffset(1, certificateOffset);
    fbBuilder.addOffset(2, passwordOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ConvertPkcs12Request {
  ConvertPkcs12Request._(this._bc, this._bcOffset);
  factory ConvertPkcs12Request(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConvertPkcs12Request> reader =
      _ConvertPkcs12RequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get pkcs12 =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get password =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ConvertPkcs12Request{pkcs12: ${pkcs12}, password: ${password}}';
  }
}

class _ConvertPkcs12RequestReader extends fb.TableReader<ConvertPkcs12Request> {
  const _ConvertPkcs12RequestReader();

  @override
  ConvertPkcs12Request createObject(fb.BufferContext bc, int offset) =>
      ConvertPkcs12Request._(bc, offset);
}

class ConvertPkcs12RequestBuilder {
  ConvertPkcs12RequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPkcs12Offset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPasswordOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConvertPkcs12RequestObjectBuilder extends fb.ObjectBuilder {
  final String? _pkcs12;
  final String? _password;

  ConvertPkcs12RequestObjectBuilder({
    String? pkcs12,
    String? password,
  })  : _pkcs12 = pkcs12,
        _password = password;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pkcs12Offset =
        _pkcs12 == null ? null : fbBuilder.writeString(_pkcs12!);
    final int? passwordOffset =
        _password == null ? null : fbBuilder.writeString(_password!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pkcs12Offset);
    fbBuilder.addOffset(1, passwordOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ConvertPrivateKeyRequest {
  ConvertPrivateKeyRequest._(this._bc, this._bcOffset);
  factory ConvertPrivateKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConvertPrivateKeyRequest> reader =
      _ConvertPrivateKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ConvertPrivateKeyRequest{privateKey: ${privateKey}}';
  }
}

class _ConvertPrivateKeyRequestReader
    extends fb.TableReader<ConvertPrivateKeyRequest> {
  const _ConvertPrivateKeyRequestReader();

  @override
  ConvertPrivateKeyRequest createObject(fb.BufferContext bc, int offset) =>
      ConvertPrivateKeyRequest._(bc, offset);
}

class ConvertPrivateKeyRequestBuilder {
  ConvertPrivateKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConvertPrivateKeyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;

  ConvertPrivateKeyRequestObjectBuilder({
    String? privateKey,
  }) : _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ConvertPublicKeyRequest {
  ConvertPublicKeyRequest._(this._bc, this._bcOffset);
  factory ConvertPublicKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConvertPublicKeyRequest> reader =
      _ConvertPublicKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ConvertPublicKeyRequest{publicKey: ${publicKey}}';
  }
}

class _ConvertPublicKeyRequestReader
    extends fb.TableReader<ConvertPublicKeyRequest> {
  const _ConvertPublicKeyRequestReader();

  @override
  ConvertPublicKeyRequest createObject(fb.BufferContext bc, int offset) =>
      ConvertPublicKeyRequest._(bc, offset);
}

class ConvertPublicKeyRequestBuilder {
  ConvertPublicKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConvertPublicKeyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _publicKey;

  ConvertPublicKeyRequestObjectBuilder({
    String? publicKey,
  }) : _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptOaeprequest {
  DecryptOaeprequest._(this._bc, this._bcOffset);
  factory DecryptOaeprequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptOaeprequest> reader =
      _DecryptOaeprequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ciphertext =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get label =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'DecryptOaeprequest{ciphertext: ${ciphertext}, label: ${label}, hash: ${hash}, privateKey: ${privateKey}}';
  }
}

class _DecryptOaeprequestReader extends fb.TableReader<DecryptOaeprequest> {
  const _DecryptOaeprequestReader();

  @override
  DecryptOaeprequest createObject(fb.BufferContext bc, int offset) =>
      DecryptOaeprequest._(bc, offset);
}

class DecryptOaeprequestBuilder {
  DecryptOaeprequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addCiphertextOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addLabelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptOaeprequestObjectBuilder extends fb.ObjectBuilder {
  final String? _ciphertext;
  final String? _label;
  final Hash? _hash;
  final String? _privateKey;

  DecryptOaeprequestObjectBuilder({
    String? ciphertext,
    String? label,
    Hash? hash,
    String? privateKey,
  })  : _ciphertext = ciphertext,
        _label = label,
        _hash = hash,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ciphertextOffset =
        _ciphertext == null ? null : fbBuilder.writeString(_ciphertext!);
    final int? labelOffset =
        _label == null ? null : fbBuilder.writeString(_label!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, ciphertextOffset);
    fbBuilder.addOffset(1, labelOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addOffset(3, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptOaepbytesRequest {
  DecryptOaepbytesRequest._(this._bc, this._bcOffset);
  factory DecryptOaepbytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptOaepbytesRequest> reader =
      _DecryptOaepbytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get ciphertext =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get label =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'DecryptOaepbytesRequest{ciphertext: ${ciphertext}, label: ${label}, hash: ${hash}, privateKey: ${privateKey}}';
  }
}

class _DecryptOaepbytesRequestReader
    extends fb.TableReader<DecryptOaepbytesRequest> {
  const _DecryptOaepbytesRequestReader();

  @override
  DecryptOaepbytesRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptOaepbytesRequest._(bc, offset);
}

class DecryptOaepbytesRequestBuilder {
  DecryptOaepbytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addCiphertextOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addLabelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptOaepbytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _ciphertext;
  final String? _label;
  final Hash? _hash;
  final String? _privateKey;

  DecryptOaepbytesRequestObjectBuilder({
    List<int>? ciphertext,
    String? label,
    Hash? hash,
    String? privateKey,
  })  : _ciphertext = ciphertext,
        _label = label,
        _hash = hash,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ciphertextOffset =
        _ciphertext == null ? null : fbBuilder.writeListUint8(_ciphertext!);
    final int? labelOffset =
        _label == null ? null : fbBuilder.writeString(_label!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, ciphertextOffset);
    fbBuilder.addOffset(1, labelOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addOffset(3, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptPkcs1v15Request {
  DecryptPkcs1v15Request._(this._bc, this._bcOffset);
  factory DecryptPkcs1v15Request(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptPkcs1v15Request> reader =
      _DecryptPkcs1v15RequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ciphertext =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DecryptPkcs1v15Request{ciphertext: ${ciphertext}, privateKey: ${privateKey}}';
  }
}

class _DecryptPkcs1v15RequestReader
    extends fb.TableReader<DecryptPkcs1v15Request> {
  const _DecryptPkcs1v15RequestReader();

  @override
  DecryptPkcs1v15Request createObject(fb.BufferContext bc, int offset) =>
      DecryptPkcs1v15Request._(bc, offset);
}

class DecryptPkcs1v15RequestBuilder {
  DecryptPkcs1v15RequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addCiphertextOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptPkcs1v15RequestObjectBuilder extends fb.ObjectBuilder {
  final String? _ciphertext;
  final String? _privateKey;

  DecryptPkcs1v15RequestObjectBuilder({
    String? ciphertext,
    String? privateKey,
  })  : _ciphertext = ciphertext,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ciphertextOffset =
        _ciphertext == null ? null : fbBuilder.writeString(_ciphertext!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, ciphertextOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptPkcs1v15BytesRequest {
  DecryptPkcs1v15BytesRequest._(this._bc, this._bcOffset);
  factory DecryptPkcs1v15BytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptPkcs1v15BytesRequest> reader =
      _DecryptPkcs1v15BytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get ciphertext =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DecryptPkcs1v15BytesRequest{ciphertext: ${ciphertext}, privateKey: ${privateKey}}';
  }
}

class _DecryptPkcs1v15BytesRequestReader
    extends fb.TableReader<DecryptPkcs1v15BytesRequest> {
  const _DecryptPkcs1v15BytesRequestReader();

  @override
  DecryptPkcs1v15BytesRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptPkcs1v15BytesRequest._(bc, offset);
}

class DecryptPkcs1v15BytesRequestBuilder {
  DecryptPkcs1v15BytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addCiphertextOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptPkcs1v15BytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _ciphertext;
  final String? _privateKey;

  DecryptPkcs1v15BytesRequestObjectBuilder({
    List<int>? ciphertext,
    String? privateKey,
  })  : _ciphertext = ciphertext,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ciphertextOffset =
        _ciphertext == null ? null : fbBuilder.writeListUint8(_ciphertext!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, ciphertextOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptPrivateKeyRequest {
  DecryptPrivateKeyRequest._(this._bc, this._bcOffset);
  factory DecryptPrivateKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptPrivateKeyRequest> reader =
      _DecryptPrivateKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKeyEncrypted =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get password =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DecryptPrivateKeyRequest{privateKeyEncrypted: ${privateKeyEncrypted}, password: ${password}}';
  }
}

class _DecryptPrivateKeyRequestReader
    extends fb.TableReader<DecryptPrivateKeyRequest> {
  const _DecryptPrivateKeyRequestReader();

  @override
  DecryptPrivateKeyRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptPrivateKeyRequest._(bc, offset);
}

class DecryptPrivateKeyRequestBuilder {
  DecryptPrivateKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPrivateKeyEncryptedOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPasswordOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptPrivateKeyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKeyEncrypted;
  final String? _password;

  DecryptPrivateKeyRequestObjectBuilder({
    String? privateKeyEncrypted,
    String? password,
  })  : _privateKeyEncrypted = privateKeyEncrypted,
        _password = password;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyEncryptedOffset = _privateKeyEncrypted == null
        ? null
        : fbBuilder.writeString(_privateKeyEncrypted!);
    final int? passwordOffset =
        _password == null ? null : fbBuilder.writeString(_password!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, privateKeyEncryptedOffset);
    fbBuilder.addOffset(1, passwordOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptOaeprequest {
  EncryptOaeprequest._(this._bc, this._bcOffset);
  factory EncryptOaeprequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptOaeprequest> reader =
      _EncryptOaeprequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get label =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EncryptOaeprequest{message: ${message}, label: ${label}, hash: ${hash}, publicKey: ${publicKey}}';
  }
}

class _EncryptOaeprequestReader extends fb.TableReader<EncryptOaeprequest> {
  const _EncryptOaeprequestReader();

  @override
  EncryptOaeprequest createObject(fb.BufferContext bc, int offset) =>
      EncryptOaeprequest._(bc, offset);
}

class EncryptOaeprequestBuilder {
  EncryptOaeprequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addLabelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptOaeprequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _label;
  final Hash? _hash;
  final String? _publicKey;

  EncryptOaeprequestObjectBuilder({
    String? message,
    String? label,
    Hash? hash,
    String? publicKey,
  })  : _message = message,
        _label = label,
        _hash = hash,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? labelOffset =
        _label == null ? null : fbBuilder.writeString(_label!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, labelOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addOffset(3, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptOaepbytesRequest {
  EncryptOaepbytesRequest._(this._bc, this._bcOffset);
  factory EncryptOaepbytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptOaepbytesRequest> reader =
      _EncryptOaepbytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get label =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EncryptOaepbytesRequest{message: ${message}, label: ${label}, hash: ${hash}, publicKey: ${publicKey}}';
  }
}

class _EncryptOaepbytesRequestReader
    extends fb.TableReader<EncryptOaepbytesRequest> {
  const _EncryptOaepbytesRequestReader();

  @override
  EncryptOaepbytesRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptOaepbytesRequest._(bc, offset);
}

class EncryptOaepbytesRequestBuilder {
  EncryptOaepbytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addLabelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptOaepbytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _label;
  final Hash? _hash;
  final String? _publicKey;

  EncryptOaepbytesRequestObjectBuilder({
    List<int>? message,
    String? label,
    Hash? hash,
    String? publicKey,
  })  : _message = message,
        _label = label,
        _hash = hash,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? labelOffset =
        _label == null ? null : fbBuilder.writeString(_label!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, labelOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addOffset(3, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptPkcs1v15Request {
  EncryptPkcs1v15Request._(this._bc, this._bcOffset);
  factory EncryptPkcs1v15Request(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptPkcs1v15Request> reader =
      _EncryptPkcs1v15RequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EncryptPkcs1v15Request{message: ${message}, publicKey: ${publicKey}}';
  }
}

class _EncryptPkcs1v15RequestReader
    extends fb.TableReader<EncryptPkcs1v15Request> {
  const _EncryptPkcs1v15RequestReader();

  @override
  EncryptPkcs1v15Request createObject(fb.BufferContext bc, int offset) =>
      EncryptPkcs1v15Request._(bc, offset);
}

class EncryptPkcs1v15RequestBuilder {
  EncryptPkcs1v15RequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptPkcs1v15RequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _publicKey;

  EncryptPkcs1v15RequestObjectBuilder({
    String? message,
    String? publicKey,
  })  : _message = message,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptPkcs1v15BytesRequest {
  EncryptPkcs1v15BytesRequest._(this._bc, this._bcOffset);
  factory EncryptPkcs1v15BytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptPkcs1v15BytesRequest> reader =
      _EncryptPkcs1v15BytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EncryptPkcs1v15BytesRequest{message: ${message}, publicKey: ${publicKey}}';
  }
}

class _EncryptPkcs1v15BytesRequestReader
    extends fb.TableReader<EncryptPkcs1v15BytesRequest> {
  const _EncryptPkcs1v15BytesRequestReader();

  @override
  EncryptPkcs1v15BytesRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptPkcs1v15BytesRequest._(bc, offset);
}

class EncryptPkcs1v15BytesRequestBuilder {
  EncryptPkcs1v15BytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptPkcs1v15BytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _publicKey;

  EncryptPkcs1v15BytesRequestObjectBuilder({
    List<int>? message,
    String? publicKey,
  })  : _message = message,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptPrivateKeyRequest {
  EncryptPrivateKeyRequest._(this._bc, this._bcOffset);
  factory EncryptPrivateKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptPrivateKeyRequest> reader =
      _EncryptPrivateKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get password =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Pemcipher get cipher => Pemcipher.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));

  @override
  String toString() {
    return 'EncryptPrivateKeyRequest{privateKey: ${privateKey}, password: ${password}, cipher: ${cipher}}';
  }
}

class _EncryptPrivateKeyRequestReader
    extends fb.TableReader<EncryptPrivateKeyRequest> {
  const _EncryptPrivateKeyRequestReader();

  @override
  EncryptPrivateKeyRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptPrivateKeyRequest._(bc, offset);
}

class EncryptPrivateKeyRequestBuilder {
  EncryptPrivateKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPasswordOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addCipher(Pemcipher? cipher) {
    fbBuilder.addInt32(2, cipher?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptPrivateKeyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;
  final String? _password;
  final Pemcipher? _cipher;

  EncryptPrivateKeyRequestObjectBuilder({
    String? privateKey,
    String? password,
    Pemcipher? cipher,
  })  : _privateKey = privateKey,
        _password = password,
        _cipher = cipher;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passwordOffset =
        _password == null ? null : fbBuilder.writeString(_password!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, privateKeyOffset);
    fbBuilder.addOffset(1, passwordOffset);
    fbBuilder.addInt32(2, _cipher?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class GenerateRequest {
  GenerateRequest._(this._bc, this._bcOffset);
  factory GenerateRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GenerateRequest> reader = _GenerateRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get nBits => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'GenerateRequest{nBits: ${nBits}}';
  }
}

class _GenerateRequestReader extends fb.TableReader<GenerateRequest> {
  const _GenerateRequestReader();

  @override
  GenerateRequest createObject(fb.BufferContext bc, int offset) =>
      GenerateRequest._(bc, offset);
}

class GenerateRequestBuilder {
  GenerateRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNBits(int? nBits) {
    fbBuilder.addInt32(0, nBits);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GenerateRequestObjectBuilder extends fb.ObjectBuilder {
  final int? _nBits;

  GenerateRequestObjectBuilder({
    int? nBits,
  }) : _nBits = nBits;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _nBits);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class HashRequest {
  HashRequest._(this._bc, this._bcOffset);
  factory HashRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HashRequest> reader = _HashRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));

  @override
  String toString() {
    return 'HashRequest{message: ${message}, hash: ${hash}}';
  }
}

class _HashRequestReader extends fb.TableReader<HashRequest> {
  const _HashRequestReader();

  @override
  HashRequest createObject(fb.BufferContext bc, int offset) =>
      HashRequest._(bc, offset);
}

class HashRequestBuilder {
  HashRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(1, hash?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HashRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final Hash? _hash;

  HashRequestObjectBuilder({
    String? message,
    Hash? hash,
  })  : _message = message,
        _hash = hash;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addInt32(1, _hash?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Base64Request {
  Base64Request._(this._bc, this._bcOffset);
  factory Base64Request(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Base64Request> reader = _Base64RequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Base64Request{message: ${message}}';
  }
}

class _Base64RequestReader extends fb.TableReader<Base64Request> {
  const _Base64RequestReader();

  @override
  Base64Request createObject(fb.BufferContext bc, int offset) =>
      Base64Request._(bc, offset);
}

class Base64RequestBuilder {
  Base64RequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class Base64RequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;

  Base64RequestObjectBuilder({
    String? message,
  }) : _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class MetadataPrivateKeyRequest {
  MetadataPrivateKeyRequest._(this._bc, this._bcOffset);
  factory MetadataPrivateKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MetadataPrivateKeyRequest> reader =
      _MetadataPrivateKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'MetadataPrivateKeyRequest{privateKey: ${privateKey}}';
  }
}

class _MetadataPrivateKeyRequestReader
    extends fb.TableReader<MetadataPrivateKeyRequest> {
  const _MetadataPrivateKeyRequestReader();

  @override
  MetadataPrivateKeyRequest createObject(fb.BufferContext bc, int offset) =>
      MetadataPrivateKeyRequest._(bc, offset);
}

class MetadataPrivateKeyRequestBuilder {
  MetadataPrivateKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MetadataPrivateKeyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;

  MetadataPrivateKeyRequestObjectBuilder({
    String? privateKey,
  }) : _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class MetadataPublicKeyRequest {
  MetadataPublicKeyRequest._(this._bc, this._bcOffset);
  factory MetadataPublicKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MetadataPublicKeyRequest> reader =
      _MetadataPublicKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'MetadataPublicKeyRequest{publicKey: ${publicKey}}';
  }
}

class _MetadataPublicKeyRequestReader
    extends fb.TableReader<MetadataPublicKeyRequest> {
  const _MetadataPublicKeyRequestReader();

  @override
  MetadataPublicKeyRequest createObject(fb.BufferContext bc, int offset) =>
      MetadataPublicKeyRequest._(bc, offset);
}

class MetadataPublicKeyRequestBuilder {
  MetadataPublicKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MetadataPublicKeyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _publicKey;

  MetadataPublicKeyRequestObjectBuilder({
    String? publicKey,
  }) : _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignPkcs1v15Request {
  SignPkcs1v15Request._(this._bc, this._bcOffset);
  factory SignPkcs1v15Request(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignPkcs1v15Request> reader =
      _SignPkcs1v15RequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SignPkcs1v15Request{message: ${message}, hash: ${hash}, privateKey: ${privateKey}}';
  }
}

class _SignPkcs1v15RequestReader extends fb.TableReader<SignPkcs1v15Request> {
  const _SignPkcs1v15RequestReader();

  @override
  SignPkcs1v15Request createObject(fb.BufferContext bc, int offset) =>
      SignPkcs1v15Request._(bc, offset);
}

class SignPkcs1v15RequestBuilder {
  SignPkcs1v15RequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(1, hash?.value);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignPkcs1v15RequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final Hash? _hash;
  final String? _privateKey;

  SignPkcs1v15RequestObjectBuilder({
    String? message,
    Hash? hash,
    String? privateKey,
  })  : _message = message,
        _hash = hash,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addInt32(1, _hash?.value);
    fbBuilder.addOffset(2, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignPkcs1v15BytesRequest {
  SignPkcs1v15BytesRequest._(this._bc, this._bcOffset);
  factory SignPkcs1v15BytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignPkcs1v15BytesRequest> reader =
      _SignPkcs1v15BytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SignPkcs1v15BytesRequest{message: ${message}, hash: ${hash}, privateKey: ${privateKey}}';
  }
}

class _SignPkcs1v15BytesRequestReader
    extends fb.TableReader<SignPkcs1v15BytesRequest> {
  const _SignPkcs1v15BytesRequestReader();

  @override
  SignPkcs1v15BytesRequest createObject(fb.BufferContext bc, int offset) =>
      SignPkcs1v15BytesRequest._(bc, offset);
}

class SignPkcs1v15BytesRequestBuilder {
  SignPkcs1v15BytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(1, hash?.value);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignPkcs1v15BytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final Hash? _hash;
  final String? _privateKey;

  SignPkcs1v15BytesRequestObjectBuilder({
    List<int>? message,
    Hash? hash,
    String? privateKey,
  })  : _message = message,
        _hash = hash,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addInt32(1, _hash?.value);
    fbBuilder.addOffset(2, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignPssrequest {
  SignPssrequest._(this._bc, this._bcOffset);
  factory SignPssrequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignPssrequest> reader = _SignPssrequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));
  SaltLength get saltLength => SaltLength.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SignPssrequest{message: ${message}, hash: ${hash}, saltLength: ${saltLength}, privateKey: ${privateKey}}';
  }
}

class _SignPssrequestReader extends fb.TableReader<SignPssrequest> {
  const _SignPssrequestReader();

  @override
  SignPssrequest createObject(fb.BufferContext bc, int offset) =>
      SignPssrequest._(bc, offset);
}

class SignPssrequestBuilder {
  SignPssrequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(1, hash?.value);
    return fbBuilder.offset;
  }

  int addSaltLength(SaltLength? saltLength) {
    fbBuilder.addInt32(2, saltLength?.value);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignPssrequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final Hash? _hash;
  final SaltLength? _saltLength;
  final String? _privateKey;

  SignPssrequestObjectBuilder({
    String? message,
    Hash? hash,
    SaltLength? saltLength,
    String? privateKey,
  })  : _message = message,
        _hash = hash,
        _saltLength = saltLength,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addInt32(1, _hash?.value);
    fbBuilder.addInt32(2, _saltLength?.value);
    fbBuilder.addOffset(3, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignPssbytesRequest {
  SignPssbytesRequest._(this._bc, this._bcOffset);
  factory SignPssbytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignPssbytesRequest> reader =
      _SignPssbytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));
  SaltLength get saltLength => SaltLength.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SignPssbytesRequest{message: ${message}, hash: ${hash}, saltLength: ${saltLength}, privateKey: ${privateKey}}';
  }
}

class _SignPssbytesRequestReader extends fb.TableReader<SignPssbytesRequest> {
  const _SignPssbytesRequestReader();

  @override
  SignPssbytesRequest createObject(fb.BufferContext bc, int offset) =>
      SignPssbytesRequest._(bc, offset);
}

class SignPssbytesRequestBuilder {
  SignPssbytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(1, hash?.value);
    return fbBuilder.offset;
  }

  int addSaltLength(SaltLength? saltLength) {
    fbBuilder.addInt32(2, saltLength?.value);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignPssbytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final Hash? _hash;
  final SaltLength? _saltLength;
  final String? _privateKey;

  SignPssbytesRequestObjectBuilder({
    List<int>? message,
    Hash? hash,
    SaltLength? saltLength,
    String? privateKey,
  })  : _message = message,
        _hash = hash,
        _saltLength = saltLength,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addInt32(1, _hash?.value);
    fbBuilder.addInt32(2, _saltLength?.value);
    fbBuilder.addOffset(3, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyPkcs1v15Request {
  VerifyPkcs1v15Request._(this._bc, this._bcOffset);
  factory VerifyPkcs1v15Request(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyPkcs1v15Request> reader =
      _VerifyPkcs1v15RequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get signature =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VerifyPkcs1v15Request{signature: ${signature}, message: ${message}, hash: ${hash}, publicKey: ${publicKey}}';
  }
}

class _VerifyPkcs1v15RequestReader
    extends fb.TableReader<VerifyPkcs1v15Request> {
  const _VerifyPkcs1v15RequestReader();

  @override
  VerifyPkcs1v15Request createObject(fb.BufferContext bc, int offset) =>
      VerifyPkcs1v15Request._(bc, offset);
}

class VerifyPkcs1v15RequestBuilder {
  VerifyPkcs1v15RequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyPkcs1v15RequestObjectBuilder extends fb.ObjectBuilder {
  final String? _signature;
  final String? _message;
  final Hash? _hash;
  final String? _publicKey;

  VerifyPkcs1v15RequestObjectBuilder({
    String? signature,
    String? message,
    Hash? hash,
    String? publicKey,
  })  : _signature = signature,
        _message = message,
        _hash = hash,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeString(_signature!);
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addOffset(3, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyPkcs1v15BytesRequest {
  VerifyPkcs1v15BytesRequest._(this._bc, this._bcOffset);
  factory VerifyPkcs1v15BytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyPkcs1v15BytesRequest> reader =
      _VerifyPkcs1v15BytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VerifyPkcs1v15BytesRequest{signature: ${signature}, message: ${message}, hash: ${hash}, publicKey: ${publicKey}}';
  }
}

class _VerifyPkcs1v15BytesRequestReader
    extends fb.TableReader<VerifyPkcs1v15BytesRequest> {
  const _VerifyPkcs1v15BytesRequestReader();

  @override
  VerifyPkcs1v15BytesRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyPkcs1v15BytesRequest._(bc, offset);
}

class VerifyPkcs1v15BytesRequestBuilder {
  VerifyPkcs1v15BytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyPkcs1v15BytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _signature;
  final List<int>? _message;
  final Hash? _hash;
  final String? _publicKey;

  VerifyPkcs1v15BytesRequestObjectBuilder({
    List<int>? signature,
    List<int>? message,
    Hash? hash,
    String? publicKey,
  })  : _signature = signature,
        _message = message,
        _hash = hash,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addOffset(3, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyPssrequest {
  VerifyPssrequest._(this._bc, this._bcOffset);
  factory VerifyPssrequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyPssrequest> reader = _VerifyPssrequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get signature =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  SaltLength get saltLength => SaltLength.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0));
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'VerifyPssrequest{signature: ${signature}, message: ${message}, hash: ${hash}, saltLength: ${saltLength}, publicKey: ${publicKey}}';
  }
}

class _VerifyPssrequestReader extends fb.TableReader<VerifyPssrequest> {
  const _VerifyPssrequestReader();

  @override
  VerifyPssrequest createObject(fb.BufferContext bc, int offset) =>
      VerifyPssrequest._(bc, offset);
}

class VerifyPssrequestBuilder {
  VerifyPssrequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addSaltLength(SaltLength? saltLength) {
    fbBuilder.addInt32(3, saltLength?.value);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyPssrequestObjectBuilder extends fb.ObjectBuilder {
  final String? _signature;
  final String? _message;
  final Hash? _hash;
  final SaltLength? _saltLength;
  final String? _publicKey;

  VerifyPssrequestObjectBuilder({
    String? signature,
    String? message,
    Hash? hash,
    SaltLength? saltLength,
    String? publicKey,
  })  : _signature = signature,
        _message = message,
        _hash = hash,
        _saltLength = saltLength,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeString(_signature!);
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addInt32(3, _saltLength?.value);
    fbBuilder.addOffset(4, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyPssbytesRequest {
  VerifyPssbytesRequest._(this._bc, this._bcOffset);
  factory VerifyPssbytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyPssbytesRequest> reader =
      _VerifyPssbytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  SaltLength get saltLength => SaltLength.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0));
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'VerifyPssbytesRequest{signature: ${signature}, message: ${message}, hash: ${hash}, saltLength: ${saltLength}, publicKey: ${publicKey}}';
  }
}

class _VerifyPssbytesRequestReader
    extends fb.TableReader<VerifyPssbytesRequest> {
  const _VerifyPssbytesRequestReader();

  @override
  VerifyPssbytesRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyPssbytesRequest._(bc, offset);
}

class VerifyPssbytesRequestBuilder {
  VerifyPssbytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addSaltLength(SaltLength? saltLength) {
    fbBuilder.addInt32(3, saltLength?.value);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyPssbytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _signature;
  final List<int>? _message;
  final Hash? _hash;
  final SaltLength? _saltLength;
  final String? _publicKey;

  VerifyPssbytesRequestObjectBuilder({
    List<int>? signature,
    List<int>? message,
    Hash? hash,
    SaltLength? saltLength,
    String? publicKey,
  })  : _signature = signature,
        _message = message,
        _hash = hash,
        _saltLength = saltLength,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addInt32(3, _saltLength?.value);
    fbBuilder.addOffset(4, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class StringResponse {
  StringResponse._(this._bc, this._bcOffset);
  factory StringResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StringResponse> reader = _StringResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get output =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StringResponse{output: ${output}, error: ${error}}';
  }
}

class _StringResponseReader extends fb.TableReader<StringResponse> {
  const _StringResponseReader();

  @override
  StringResponse createObject(fb.BufferContext bc, int offset) =>
      StringResponse._(bc, offset);
}

class StringResponseBuilder {
  StringResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StringResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _output;
  final String? _error;

  StringResponseObjectBuilder({
    String? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeString(_output!);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class BytesResponse {
  BytesResponse._(this._bc, this._bcOffset);
  factory BytesResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BytesResponse> reader = _BytesResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get output =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'BytesResponse{output: ${output}, error: ${error}}';
  }
}

class _BytesResponseReader extends fb.TableReader<BytesResponse> {
  const _BytesResponseReader();

  @override
  BytesResponse createObject(fb.BufferContext bc, int offset) =>
      BytesResponse._(bc, offset);
}

class BytesResponseBuilder {
  BytesResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BytesResponseObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _output;
  final String? _error;

  BytesResponseObjectBuilder({
    List<int>? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeListUint8(_output!);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class BoolResponse {
  BoolResponse._(this._bc, this._bcOffset);
  factory BoolResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BoolResponse> reader = _BoolResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get output => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'BoolResponse{output: ${output}, error: ${error}}';
  }
}

class _BoolResponseReader extends fb.TableReader<BoolResponse> {
  const _BoolResponseReader();

  @override
  BoolResponse createObject(fb.BufferContext bc, int offset) =>
      BoolResponse._(bc, offset);
}

class BoolResponseBuilder {
  BoolResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutput(bool? output) {
    fbBuilder.addBool(0, output);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BoolResponseObjectBuilder extends fb.ObjectBuilder {
  final bool? _output;
  final String? _error;

  BoolResponseObjectBuilder({
    bool? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _output);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Pkcs12KeyPairResponse {
  Pkcs12KeyPairResponse._(this._bc, this._bcOffset);
  factory Pkcs12KeyPairResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Pkcs12KeyPairResponse> reader =
      _Pkcs12KeyPairResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Pkcs12KeyPair? get output =>
      Pkcs12KeyPair.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Pkcs12KeyPairResponse{output: ${output}, error: ${error}}';
  }
}

class _Pkcs12KeyPairResponseReader
    extends fb.TableReader<Pkcs12KeyPairResponse> {
  const _Pkcs12KeyPairResponseReader();

  @override
  Pkcs12KeyPairResponse createObject(fb.BufferContext bc, int offset) =>
      Pkcs12KeyPairResponse._(bc, offset);
}

class Pkcs12KeyPairResponseBuilder {
  Pkcs12KeyPairResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class Pkcs12KeyPairResponseObjectBuilder extends fb.ObjectBuilder {
  final Pkcs12KeyPairObjectBuilder? _output;
  final String? _error;

  Pkcs12KeyPairResponseObjectBuilder({
    Pkcs12KeyPairObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Pkcs12KeyPair {
  Pkcs12KeyPair._(this._bc, this._bcOffset);
  factory Pkcs12KeyPair(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Pkcs12KeyPair> reader = _Pkcs12KeyPairReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get certificate =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Pkcs12KeyPair{privateKey: ${privateKey}, publicKey: ${publicKey}, certificate: ${certificate}}';
  }
}

class _Pkcs12KeyPairReader extends fb.TableReader<Pkcs12KeyPair> {
  const _Pkcs12KeyPairReader();

  @override
  Pkcs12KeyPair createObject(fb.BufferContext bc, int offset) =>
      Pkcs12KeyPair._(bc, offset);
}

class Pkcs12KeyPairBuilder {
  Pkcs12KeyPairBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addCertificateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class Pkcs12KeyPairObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;
  final String? _publicKey;
  final String? _certificate;

  Pkcs12KeyPairObjectBuilder({
    String? privateKey,
    String? publicKey,
    String? certificate,
  })  : _privateKey = privateKey,
        _publicKey = publicKey,
        _certificate = certificate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    final int? certificateOffset =
        _certificate == null ? null : fbBuilder.writeString(_certificate!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, privateKeyOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    fbBuilder.addOffset(2, certificateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class KeyPairResponse {
  KeyPairResponse._(this._bc, this._bcOffset);
  factory KeyPairResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyPairResponse> reader = _KeyPairResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  KeyPair? get output => KeyPair.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'KeyPairResponse{output: ${output}, error: ${error}}';
  }
}

class _KeyPairResponseReader extends fb.TableReader<KeyPairResponse> {
  const _KeyPairResponseReader();

  @override
  KeyPairResponse createObject(fb.BufferContext bc, int offset) =>
      KeyPairResponse._(bc, offset);
}

class KeyPairResponseBuilder {
  KeyPairResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyPairResponseObjectBuilder extends fb.ObjectBuilder {
  final KeyPairObjectBuilder? _output;
  final String? _error;

  KeyPairResponseObjectBuilder({
    KeyPairObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class KeyPair {
  KeyPair._(this._bc, this._bcOffset);
  factory KeyPair(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyPair> reader = _KeyPairReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'KeyPair{privateKey: ${privateKey}, publicKey: ${publicKey}}';
  }
}

class _KeyPairReader extends fb.TableReader<KeyPair> {
  const _KeyPairReader();

  @override
  KeyPair createObject(fb.BufferContext bc, int offset) =>
      KeyPair._(bc, offset);
}

class KeyPairBuilder {
  KeyPairBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyPairObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;
  final String? _publicKey;

  KeyPairObjectBuilder({
    String? privateKey,
    String? publicKey,
  })  : _privateKey = privateKey,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, privateKeyOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PrivateKeyInfoResponse {
  PrivateKeyInfoResponse._(this._bc, this._bcOffset);
  factory PrivateKeyInfoResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrivateKeyInfoResponse> reader =
      _PrivateKeyInfoResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PrivateKeyInfo? get output =>
      PrivateKeyInfo.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PrivateKeyInfoResponse{output: ${output}, error: ${error}}';
  }
}

class _PrivateKeyInfoResponseReader
    extends fb.TableReader<PrivateKeyInfoResponse> {
  const _PrivateKeyInfoResponseReader();

  @override
  PrivateKeyInfoResponse createObject(fb.BufferContext bc, int offset) =>
      PrivateKeyInfoResponse._(bc, offset);
}

class PrivateKeyInfoResponseBuilder {
  PrivateKeyInfoResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrivateKeyInfoResponseObjectBuilder extends fb.ObjectBuilder {
  final PrivateKeyInfoObjectBuilder? _output;
  final String? _error;

  PrivateKeyInfoResponseObjectBuilder({
    PrivateKeyInfoObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PrivateKeyInfo {
  PrivateKeyInfo._(this._bc, this._bcOffset);
  factory PrivateKeyInfo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrivateKeyInfo> reader = _PrivateKeyInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get bitLen => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get size => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PrivateKeyInfo{bitLen: ${bitLen}, size: ${size}, error: ${error}}';
  }
}

class _PrivateKeyInfoReader extends fb.TableReader<PrivateKeyInfo> {
  const _PrivateKeyInfoReader();

  @override
  PrivateKeyInfo createObject(fb.BufferContext bc, int offset) =>
      PrivateKeyInfo._(bc, offset);
}

class PrivateKeyInfoBuilder {
  PrivateKeyInfoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addBitLen(int? bitLen) {
    fbBuilder.addInt64(0, bitLen);
    return fbBuilder.offset;
  }

  int addSize(int? size) {
    fbBuilder.addInt64(1, size);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrivateKeyInfoObjectBuilder extends fb.ObjectBuilder {
  final int? _bitLen;
  final int? _size;
  final String? _error;

  PrivateKeyInfoObjectBuilder({
    int? bitLen,
    int? size,
    String? error,
  })  : _bitLen = bitLen,
        _size = size,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(3);
    fbBuilder.addInt64(0, _bitLen);
    fbBuilder.addInt64(1, _size);
    fbBuilder.addOffset(2, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PublicKeyInfoResponse {
  PublicKeyInfoResponse._(this._bc, this._bcOffset);
  factory PublicKeyInfoResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PublicKeyInfoResponse> reader =
      _PublicKeyInfoResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PublicKeyInfo? get output =>
      PublicKeyInfo.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PublicKeyInfoResponse{output: ${output}, error: ${error}}';
  }
}

class _PublicKeyInfoResponseReader
    extends fb.TableReader<PublicKeyInfoResponse> {
  const _PublicKeyInfoResponseReader();

  @override
  PublicKeyInfoResponse createObject(fb.BufferContext bc, int offset) =>
      PublicKeyInfoResponse._(bc, offset);
}

class PublicKeyInfoResponseBuilder {
  PublicKeyInfoResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PublicKeyInfoResponseObjectBuilder extends fb.ObjectBuilder {
  final PublicKeyInfoObjectBuilder? _output;
  final String? _error;

  PublicKeyInfoResponseObjectBuilder({
    PublicKeyInfoObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PublicKeyInfo {
  PublicKeyInfo._(this._bc, this._bcOffset);
  factory PublicKeyInfo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PublicKeyInfo> reader = _PublicKeyInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get bitLen => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get size => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get e => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'PublicKeyInfo{bitLen: ${bitLen}, size: ${size}, e: ${e}}';
  }
}

class _PublicKeyInfoReader extends fb.TableReader<PublicKeyInfo> {
  const _PublicKeyInfoReader();

  @override
  PublicKeyInfo createObject(fb.BufferContext bc, int offset) =>
      PublicKeyInfo._(bc, offset);
}

class PublicKeyInfoBuilder {
  PublicKeyInfoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addBitLen(int? bitLen) {
    fbBuilder.addInt64(0, bitLen);
    return fbBuilder.offset;
  }

  int addSize(int? size) {
    fbBuilder.addInt64(1, size);
    return fbBuilder.offset;
  }

  int addE(int? e) {
    fbBuilder.addInt64(2, e);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PublicKeyInfoObjectBuilder extends fb.ObjectBuilder {
  final int? _bitLen;
  final int? _size;
  final int? _e;

  PublicKeyInfoObjectBuilder({
    int? bitLen,
    int? size,
    int? e,
  })  : _bitLen = bitLen,
        _size = size,
        _e = e;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addInt64(0, _bitLen);
    fbBuilder.addInt64(1, _size);
    fbBuilder.addInt64(2, _e);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
